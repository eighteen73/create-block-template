<?php
/**
 * Main plugin class.
 *
 * @package {{namespacePascalCase}}\{{slugPascalCase}}
 */

namespace {{namespacePascalCase}}\{{slugPascalCase}};

defined( 'ABSPATH' ) || exit;

/**
 * Main Plugin class.
 */
class Plugin {

	use Singleton;

	/**
	 * Setup the plugin.
	 *
	 * @return void
	 */
	public function setup(): void {
		add_action( 'init', [ $this, 'load_textdomain' ] );
		add_action( 'wp_enqueue_scripts', [ $this, 'enqueue_scripts' ] );
		add_action( 'admin_enqueue_scripts', [ $this, 'enqueue_admin_scripts' ] );
		{{^isNoBlocksVariant}}
		add_action( 'init', [ $this, 'register_blocks' ] );
		{{/isNoBlocksVariant}}
	}

	/**
	 * Load plugin textdomain.
	 *
	 * @return void
	 */
	public function load_textdomain(): void {
		load_plugin_textdomain(
			'{{textdomain}}',
			false,
			{{slugScreamingSnakeCase}}_PATH . '/languages'
		);
	}

	/**
	 * Plugin activation.
	 *
	 * @return void
	 */
	public static function activation(): void {}

	/**
	 * Plugin deactivation.
	 *
	 * @return void
	 */
	public static function deactivation(): void {}

	/**
	 * Enqueue frontend scripts and styles.
	 *
	 * @return void
	 */
	public function enqueue_scripts(): void {}

	/**
	 * Enqueue admin scripts and styles.
	 *
	 * @return void
	 */
	public function enqueue_admin_scripts(): void {}

    {{^isNoBlocksVariant}}
	/**
	 * Register blocks.
	 *
	 * @return void
	 */
	public function register_blocks(): void {
		wp_register_block_types_from_metadata_collection(
			{{slugScreamingSnakeCase}}_PATH . 'build/blocks',
			{{slugScreamingSnakeCase}}_PATH . 'build/blocks-manifest.php',
		);
	}
	{{/isNoBlocksVariant}}
}
